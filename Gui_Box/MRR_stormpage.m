function [ status ] = MRR_stormpage( stormPage, dates, settings )
%MRR_STORMPAGE Generates the html file for a storm's images and summary
%   
%   INPUTS:
%       stormPage - Struct generated by MRR_Get_METAR or MRR_Add_Storms
%                   that contains all the information that must go into
%                   each storms individual storm page.
%       settings - One field from settings is used: empty_stormpage. This
%                  field must be set to the html file that is being used as
%                  the empty storm page template for the current site.
%
%                  UPDATE: If you are processing perusal pages for Stony
%                  Brook, NY, then you can set settings.get_soundings in
%                  order to plot sounding image/table at the end of storm
%                  pages.
%
%   Author: Spencer Rhodes (srrhodes@ncsu.edu)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% This code is part of a suite of software developed under the guidance of
% Dr. Sandra Yuter and the Cloud Precipitation Processes and Patterns Group
% at North Carolina State University.
% Copyright (C) 2013 Spencer Rhodes and Andrew Hall
% 
% This program is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with this program.  If not, see <http://www.gnu.org/licenses/>.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

for i = 1:length(stormPage)
    filestr = fileread(settings.empty_stormpage);
    fileid = fopen(stormPage(i).href, 'w');
    if fileid < 0, break; end
    
    filestr = strrep(filestr, '**Stormpage Title**', datestr(stormPage(i).start, ...
        'yyyy/mm/dd - HH:MM UTC'));
    
    if ~isfield(stormPage, 'avgtemp')
        filestr = strrep(filestr, '**Graph Title**', stormPage(i).maingraph_title);
        filestr = strrep(filestr, '**Z and W Graph**', stormPage(i).main_graph);
        
    else
        %%% Make conversions to strings for necessary numbers:
        % Temperature:
        stormPage(i).avgtemp = sprintf('%.1f', stormPage(i).avgtemp);
        stormPage(i).maxtemp = sprintf('%.1f', stormPage(i).maxtemp);
        stormPage(i).mintemp = sprintf('%.1f', stormPage(i).mintemp);
        % Pressure:
        if ~isfield(settings, 'is_alta')
            stormPage(i).avgpres = sprintf('%.0f', stormPage(i).avgpres);
            stormPage(i).maxpres = sprintf('%.0f', stormPage(i).maxpres);
            stormPage(i).minpres = sprintf('%.0f', stormPage(i).minpres);
        end
        % Relative Humidity:
        stormPage(i).avgrh = sprintf('%.0f', stormPage(i).avgrh);
        stormPage(i).maxrh = sprintf('%.0f', stormPage(i).maxrh);
        stormPage(i).minrh = sprintf('%.0f', stormPage(i).minrh);
        % Wind Direction:
        if isnan(stormPage(i).avgwdir) && (stormPage(i).maxwsp == 0)
            filestr = strrep(filestr, '*avgwinddir*&deg;', 'No wind');
        elseif isnan(stormPage(i).avgwdir)
            filestr = strrep(filestr, '*avgwinddir*&deg;', 'Balanced');
        else
            stormPage(i).avgwdir = sprintf('%.1f', stormPage(i).avgwdir);
            filestr = strrep(filestr, '*avgwinddir*', stormPage(i).avgwdir);
        end
        % Wind Speed:
        stormPage(i).avgwsp = sprintf('%.1f', stormPage(i).avgwsp);
        stormPage(i).maxwsp = sprintf('%.1f', stormPage(i).maxwsp);
        stormPage(i).minwsp = sprintf('%.1f', stormPage(i).minwsp);
        % Wildcat Wind Speed (Alta only):
        if isfield(settings, 'is_alta')
            stormPage(i).avgwspWildcat = sprintf('%.1f', stormPage(i).avgwspWildcat);
            stormPage(i).maxwspWildcat = sprintf('%.1f', stormPage(i).maxwspWildcat);
            stormPage(i).minwspWildcat = sprintf('%.1f', stormPage(i).minwspWildcat);
        end

        filestr = strrep(filestr, '<!-- Add summary of storm here -->', ...
            [sprintf('On %s, a storm developed at about %s UTC. ', ...
            datestr(stormPage(i).start, 'mmmm dd, yyyy'), ...
            datestr(stormPage(i).start, 'HH:MM')) ...
            'Below are the dBZ, doppler velocity, and spectral width ' ...
            'radar images and graphs of statistics during and around ' ...
            'the storm. The areas of the graph colored green represent ' ...
            'the time of the storm. All images link to a larger image.']);
        filestr = strrep(filestr, '**Graph Title**', stormPage(i).maingraph_title);
        filestr = strrep(filestr, '**Other Graphs Title**', stormPage(i).othergraphs_title);
        filestr = strrep(filestr, '**Z and W Graph**', ['"' stormPage(i).main_graph '"']);
        filestr = strrep(filestr, '**Temp Graph**', ['"' stormPage(i).temp_graph '"']);
        filestr = strrep(filestr, '**Wind Speed Graph**', ['"' stormPage(i).wsp_graph '"']);
        filestr = strrep(filestr, '**hPa Graph**', ['"' stormPage(i).hpa_graph '"']);
        filestr = strrep(filestr, '**RH Graph**', ['"' stormPage(i).rh_graph '"']);
        filestr = strrep(filestr, '**Wind Dir Graph**', ['"' stormPage(i).wdir_graph '"']);
        filestr = strrep(filestr, '**Uprad Graph**', ['"' stormPage(i).uprad_graph '"']);
        filestr = strrep(filestr, '*avgtemp*', stormPage(i).avgtemp);
        if ~isfield(settings, 'is_alta')
            filestr = strrep(filestr, '*avgpres*', stormPage(i).avgpres);
            filestr = strrep(filestr, '*maxpres*', stormPage(i).maxpres);
            filestr = strrep(filestr, '*minpres*', stormPage(i).minpres);
        else
            filestr = strrep(filestr, '*avgwspWildcat*', stormPage(i).avgwspWildcat);
            filestr = strrep(filestr, '*maxwspWildcat*', stormPage(i).maxwspWildcat);
            filestr = strrep(filestr, '*minwspWildcat*', stormPage(i).minwspWildcat);
        end            
        filestr = strrep(filestr, '*avgrh*', stormPage(i).avgrh);
        filestr = strrep(filestr, '*avgwsp*', stormPage(i).avgwsp);
        filestr = strrep(filestr, '*maxtemp*', stormPage(i).maxtemp);
        filestr = strrep(filestr, '*maxrh*', stormPage(i).maxrh);
        filestr = strrep(filestr, '*maxwsp*', stormPage(i).maxwsp);
        filestr = strrep(filestr, '*mintemp*', stormPage(i).mintemp);
        filestr = strrep(filestr, '*minrh*', stormPage(i).minrh);
        filestr = strrep(filestr, '*minwsp*', stormPage(i).minwsp);
        
    end
    
    % Add sounding to stormpage if user specifies to do so in the settings.
    % Note that this should ONLY be done for SBU perusal pages. If
    % soundings are desired for other locations, extra code/support will
    % need to be added.
    if isfield(settings, 'get_soundings')
        for j = dates(i).start:1/(24*60):dates(i).end
            if strcmp(datestr(j,'HHMM'),'1200') || strcmp(datestr(j,'HHMM'),'0000')
                % Read the constructed URL into snd_data
                snd_data = urlread(['http://weather.uwyo.edu/cgi-bin/sounding?' ...
                    'region=naconf&TYPE=TEXT%3ALIST&YEAR=' datestr(j,'yyyy') ...
                    '&MONTH=' datestr(j,'mm') '&FROM=' datestr(j,'ddHH') ...
                    '&TO=' datestr(j,'ddHH') '&STNM=72501']);
                
                % If the sounding isn't available for the time, continue
                % through the for-loop
                if ~isempty(strfind(snd_data,'Can''t get 72501 OKX Upton Observations'))
                    continue;
                end
                
                % Otherwise, keep going by getting the sounding list and
                % making a graph of the sounding data     
                startstr = '-----------------------------------------------------------------------------';
                endstr = '</PRE>';
                snd_start = strfind(snd_data,startstr);
                liststart = snd_start(2) + length(startstr) + 1;
                listend = strfind(snd_data,endstr); listend = listend(1) - 2;
                snd_list = snd_data(liststart:listend);
                parsed_snd_data = textscan(snd_list, ...
                    '%6s %5s %5s %6s %3s %5s %3s %3s %5s %5s %5s');
                
                % First make sure that all columns are same length. Any
                % missing data at the end will result in data in the wrong
                % columns, so just chop off the bottom (top) of sounding.
                minNumberRecords = length(parsed_snd_data{1});
                for k = 2:length(parsed_snd_data)
                    minNumberRecords = min(minNumberRecords, length(parsed_snd_data{k}));
                end
                for k = 1:length(parsed_snd_data)
                    parsed_snd_data{k} = parsed_snd_data{k}(1:minNumberRecords);
                end
                
                % Necessary fields for making the sounding plot
                pressure = str2double(parsed_snd_data{1});
                temperature = str2double(parsed_snd_data{3});
                dewpoint = str2double(parsed_snd_data{4});
                
                % Before proceeding with making the skew-T sounding, we're
                % going to insert the simplified table form of the sounding
                % into the filestr for the stormpage.html file
                snd_cutoff = find(pressure >= 400,1,'last');
                % This next statement is a bit long and complicated, but
                % all it's doing is chopping the list off at the line with
                % the last record >= 400 hPa
                snd_cutoff = snd_data(snd_start(1) : ...
                    strfind(snd_data,[parsed_snd_data{8}{snd_cutoff} '  ' ...
                                      parsed_snd_data{9}{snd_cutoff} '  ' ...
                                     parsed_snd_data{10}{snd_cutoff} '  ' ...
                                     parsed_snd_data{11}{snd_cutoff}]) + ...
                              length([parsed_snd_data{8}{snd_cutoff} '  ' ...
                                      parsed_snd_data{9}{snd_cutoff} '  ' ...
                                     parsed_snd_data{10}{snd_cutoff} '  ' ...
                                     parsed_snd_data{11}{snd_cutoff}]) - 1);
                % The header of the sounding includes a percent sign under
                % the Relative Humidity (RH) label. This percent sign
                % causes errors in the HTML files, so we need to replace it
                % with the symbolic equivalent.
                snd_cutoff = strrep(snd_cutoff, '%', '&#37;');
                
                % First we need to insert a CSS style for cropping the
                % sounding image in the stormpage.
                filestr = strrep(filestr,'.style1 {font-size: 16px}',...
                    sprintf('%s\n%s\n\t%s\n\t%s\n\t%s\n%s\n%s\n\t%s\n\t%s\n\t%s\n%s', ...
                    '.style1 {font-size: 16px}', ...
                    '.crop {', ...
                    'width: 900px;', ...
                    'height: 400px;', ...
                    'overflow: hidden;', ...
                    '}', ...
                    '.crop img {', ...
                    'width: 900px;', ...
                    'height: 800px;', ...
                    'margin: -400px 0 0 0;', ...
                    '}'));
                
                % Now insert the cutoff sounding into the filestr
                filestr = strrep(filestr,'</html>',...
                    sprintf(['%s\n' ...
                             '%s\n' ...
                             '\t%s\n' ...
                             '\t\t%s\n' ...
                             '\t\t\t%s\n' ...
                             '\t\t\t%s\n' ...
                             '%s\n' ...
                             '\t\t\t%s\n' ...
                             '\t\t%s\n' ...
                             '\t\t%s\n' ...
                             '\t\t\t%s\n' ...
                             '\t\t\t%s\n' ...
                             '\t\t%s\n' ...
                             '\t%s\n' ...
                             '%s\n' ...
                             '%s'], ...
                    '<br>', ...
                    '<table align="center" width="1050" border="0" cellspacing="0">', ...
                        '<tr>', ...
                            '<td>', ...
                                ['<H2>72501 OKX Upton Observations at ' datestr(j,'HH') ...
                                    'Z ' datestr(j,'dd mmm yyyy') '</H2>'], ...
                                '<PRE>', ...
                                snd_cutoff(:), ...
                                '</PRE>', ...
                            '</td>', ...
                            '<td>', ...
                                ['<div align="center"><strong> Cropped Sounding from OKX </strong>' ...
                                    '- Click image for full size</div><br><br>'], ...
                                ['<div class="crop"><a href="' datestr(j,'yyyymmdd_HH') '00_snd.png">' ...
                                    '<img src="' datestr(j,'yyyymmdd_HH') '00_snd.png"></a></div>'], ...
                            '</td>', ...
                        '</tr>', ...
                    '</table>', ...
                    '</html>'));
                
                % The following instructions are mostly taken from the
                % mea312_lab5 script for setting up the environment to
                % write a sounding, and actually printing the sounding to a
                % PNG file.
                c.include_isobars = true;               % draw isobars
                c.include_isotherms = true;             % draw isotherms
                c.include_standard_atmosphere = true;   % draw standard height axis
                c.include_isohumes = true;              % draw constant ws lines
                c.include_isohume_labels = true;        % ONLY VALID FOR angle > 10
                c.include_dry_adiabats = true;          % draw dry adiabats
                c.include_moist_adiabats = true;        % draw moist adiabats
                % Standard angle for a skew-T is 45 degrees...
                c.angle = 45;
                % Call skew_t_log_p_construct function to setup skew-T
                skew_t_log_p_construct(c);
                
                % Add lines to the plot
                hold on
                temperature = coordinate_transform(c, temperature, pressure);
                dewpoint = coordinate_transform(c, dewpoint, pressure);
                plot(temperature, pressure, 'k', 'LineWidth', 1, 'Color', 'r')
                plot(dewpoint, pressure, 'k', 'LineWidth', 1, 'Color', [0 0.8 0])
                
                % Add annotation to the graph with title string of sounding
                text(-60, 85, ['OKX ' datestr(j,'HH') 'Z ' datestr(j,'yyyymmdd')]);
                hold off
                
                % Now print the sounding to a file (in the storms folder)
                print('-dpng','-r300',['storms\' datestr(j,'yyyymmdd_HH') '00_snd.png'])
                
                % And that's it!
            end
        end      
    end
    
    fwrite(fileid, filestr, 'uchar');
    close = fclose(fileid);
    
    if close == 0
        status = 0;
    else
        if (length(status) >= 1)
            status(length(status) + 1) = i; %#ok<AGROW>
        else
            status = i;
        end
    end
    
end


end

